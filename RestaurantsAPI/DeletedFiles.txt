//////////////////////////////// Controllers/WeatherForecastController.cs ////////////
using Microsoft.AspNetCore.Mvc;

namespace RestaurantsAPI.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private readonly IWeatherForecastService _service;

        private readonly ILogger<WeatherForecastController> _logger;

        public WeatherForecastController(ILogger<WeatherForecastController> logger, IWeatherForecastService service)
        {
            _logger = logger;
            _service = service;
        }

        [HttpGet]
        public IEnumerable<WeatherForecast> Get()
        {
            var result = _service.Get();
            return result;
        }

        [HttpGet("getw/{resultCount},{minTempC},{maxTempC}")]
        public ActionResult<IEnumerable<WeatherForecast>> GetW([FromRoute] int resultCount, [FromRoute] int minTempC,
           [FromRoute] int maxTempC)
        {
            var result = _service.Get();
            return Ok(result);
        }

        [HttpGet("currentDay/{max}")]
        //[Route("currentDay")]
        public IEnumerable<WeatherForecast> Get2([FromQuery] int take, [FromRoute] int max)
        {
            var result = _service.Get();
            return result;
        }

        [HttpPost]
        public ActionResult<string> Hello([FromBody] string name)
        {
            //HttpContext.Response.StatusCode = 400;
            //return StatusCode(401, $"Hello {name}");
            return NotFound($"Hello {name}");
        }

        [HttpPost("generate")]
        public ActionResult<IEnumerable<WeatherForecast>> Generate([FromQuery] int resultCount, 
            [FromBody] TempRangeC tempRangeC)
        {
            if (resultCount <= 0 || resultCount > 50 || tempRangeC.minTempC >= tempRangeC.maxTempC) return BadRequest();
            var ret = _service.GetW(resultCount, tempRangeC.minTempC, tempRangeC.maxTempC);
            return Ok(ret);
        }
    }
    public class TempRangeC
    {
        public int minTempC { get; set; }
        public int maxTempC { get; set; }
    }
}

//////////////////////////////// IWeatherForecastService.cs ////////////
namespace RestaurantsAPI
{
    public interface IWeatherForecastService
    {
        IEnumerable<WeatherForecast> Get();
        IEnumerable<WeatherForecast> GetW(int results, int minTempC, int maxTempC);
    }
}

//////////////////////////////// WeatherForecast.cs ////////////
namespace RestaurantsAPI
{
    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string? Summary { get; set; }
    }
}

//////////////////////////////// WeatherForecastService.cs ////////////
namespace RestaurantsAPI
{
    public class WeatherForecastService : IWeatherForecastService
    {
        private static readonly string[] Summaries = new[]
        {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        public IEnumerable<WeatherForecast> Get()
        {
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .ToArray();
        }

        public IEnumerable<WeatherForecast> GetW(int count,int minTempC, int maxTempC)
        {
            return Enumerable.Range(1, count).Select(index => new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = Random.Shared.Next(minTempC, maxTempC),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .ToArray();
        }
    }
}


////////////////////////////////  in Program.cs ////////////
builder.Services.AddTransient<IWeatherForecastService, WeatherForecastService>();       //przy kazdym uzyciu konstruktora tej klasy


